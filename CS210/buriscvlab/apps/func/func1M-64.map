
Allocating common symbols
Common symbol       size              file

output              0x100             func-64.o
bytes               0x4               func-64.o
func2bytes          0x4               func-64.o

Memory Configuration

Name             Origin             Length             Attributes
state            0x0000000000000000 0x0000000000100000 axwl
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /tmp/ccyzmQxl.o
LOAD /tmp/cc9KsXFE.o
LOAD func-64.o
LOAD /research/sesa/210/buriscv/multilib/bin/../lib/gcc/riscv64-unknown-elf/5.2.0/soft-float/no-atomic/libgcc.a
LOAD /research/sesa/210/buriscv/multilib/bin/../lib/gcc/riscv64-unknown-elf/5.2.0/soft-float/no-atomic/libgcc.a
START GROUP
LOAD /research/sesa/210/buriscv/multilib/bin/../lib/gcc/riscv64-unknown-elf/5.2.0/../../../../riscv64-unknown-elf/lib/soft-float/no-atomic/libc.a
LOAD /research/sesa/210/buriscv/lib/libsys-64.a
LOAD /research/sesa/210/buriscv/multilib/bin/../lib/gcc/riscv64-unknown-elf/5.2.0/soft-float/no-atomic/libgcc.a
END GROUP

RAM             0x0000000000000000   0x100000
                0x0000000000000000                _ram_start = .
                0x0000000000000100                . = 0x100
 *fill*         0x0000000000000000      0x100 
                0x0000000000000100                _vector_start = .
                0x0000000000000100                . = (_vector_start + 0x0)
                0x0000000000000100                _vector_user = .
                0x0000000000000100        0x4 LONG 0x100073
                0x0000000000000140                . = (_vector_start + 0x40)
 *fill*         0x0000000000000104       0x3c 
                0x0000000000000140                _vector_supervisor = .
                0x0000000000000140        0x4 LONG 0x100073
                0x0000000000000180                . = (_vector_start + 0x80)
 *fill*         0x0000000000000144       0x3c 
                0x0000000000000180                _vector_hypervisor = .
                0x0000000000000180        0x4 LONG 0x100073
                0x00000000000001c0                . = (_vector_start + 0xc0)
 *fill*         0x0000000000000184       0x3c 
                0x00000000000001c0                _vector_machine = .
                0x00000000000001c0        0x4 LONG 0x100073
                0x00000000000001fc                . = (_vector_start + 0xfc)
 *fill*         0x00000000000001c4       0x38 
                0x00000000000001fc                _vector_nmi = .
                0x00000000000001fc        0x4 LONG 0x100073
                0x0000000000000200                . = (_vector_start + 0x100)
                0x0000000000000200                _vector_reset = .
 *(.reset)
 .reset         0x0000000000000200       0x34 /tmp/cc9KsXFE.o
                0x0000000000010000                . = 0x10000
 *fill*         0x0000000000000234     0xfdcc 
                0x0000000000010000                _ftext = .
                0x0000000000010000                PROVIDE (eprol, .)
 *(.text)
 .text          0x0000000000010000       0x34 /tmp/ccyzmQxl.o
                0x0000000000010000                start
 .text          0x0000000000010034        0x0 /tmp/cc9KsXFE.o
 .text          0x0000000000010034       0x98 func-64.o
                0x0000000000010034                cpystr
                0x0000000000010068                func2
                0x000000000001009c                func1
 *(.text.*)
 .text.startup  0x00000000000100cc       0x24 func-64.o
                0x00000000000100cc                main
 *(.gnu.linkonce.t.*)
 *(.init)
 *(.fini)
 *(.rdata)
 *(.rodata)
 *(.rodata.*)
 .rodata.str1.8
                0x00000000000100f0       0x20 func-64.o
                                         0x1e (size before relaxing)
 *(.gnu.linkonce.r.*)
                0x0000000000010110                PROVIDE (etext, .)
                0x0000000000010110                _etext = .
                0x0000000000010110                PROVIDE (__preinit_array_start, .)
 *(.preinit_array)
                0x0000000000010110                PROVIDE (__preinit_array_end, .)
                0x0000000000010110                PROVIDE (__init_array_start, .)
 *(SORT(.init_array.*))
 *(.init_array)
                0x0000000000010110                PROVIDE (__init_array_end, .)
                0x0000000000010110                PROVIDE (__fini_array_start, .)
 *(SORT(.fini_array.*))
 *(.fini_array)
                0x0000000000010110                PROVIDE (__fini_array_end, .)
 *(.eh_frame_hdr)
 *(.eh_frame)
 *(.gcc_except_table)
 *(.jcr)
                0x0000000000010110                . = ALIGN (0x10)
 *fill*         0x0000000000010110        0x0 
                0x0000000000010110                _fdata = .
 *(.data)
 .data          0x0000000000010110        0x0 /tmp/ccyzmQxl.o
 .data          0x0000000000010110        0x0 /tmp/cc9KsXFE.o
 .data          0x0000000000010110        0x0 func-64.o
 *(.data.*)
 *(.gnu.linkonce.d.*)
                0x0000000000010110                PROVIDE (edata, .)
                0x0000000000010110                _edata = .
                0x0000000000010110                . = ALIGN (0x10)
                0x0000000000010910                _gp = (. + 0x800)
 *(.sdata)
 *(.sdata.*)
 *(.srodata.*)
 *(.gnu.linkonce.s.*)
                0x0000000000010110                . = ALIGN (0x8)
                0x0000000000010110                _fbss = .
 *(.sbss)
 *(.sbss.*)
 *(.gnu.linkonce.sb.*)
                0x0000000000010110                . = .
                0x0000000000010110                _bss_start = .
 *(.bss)
 .bss           0x0000000000010110        0x0 /tmp/ccyzmQxl.o
 .bss           0x0000000000010110        0x0 /tmp/cc9KsXFE.o
 .bss           0x0000000000010110        0x0 func-64.o
 *(.bss.*)
 *(.gnu.linkonce.b.*)
 *(COMMON)
 COMMON         0x0000000000010110      0x108 func-64.o
                0x0000000000010110                output
                0x0000000000010210                bytes
                0x0000000000010214                func2bytes
                0x0000000000010218                PROVIDE (end, .)
                0x0000000000010218                _end = ALIGN (0x8)
                0x0000000000100000                . = 0x100000
 *fill*         0x0000000000010218    0xefde8 
                0x0000000000100000                _stack_start = .
                0x0000000000100000                _ram_end = .
OUTPUT(func1M-64.elf elf64-littleriscv)

.rela.dyn       0x0000000000100000        0x0
 .rela.text     0x0000000000100000        0x0 /tmp/ccyzmQxl.o
 .rela.text.startup
                0x0000000000100000        0x0 /tmp/ccyzmQxl.o

.comment        0x0000000000000000       0x11
 .comment       0x0000000000000000       0x11 func-64.o
                                         0x12 (size before relaxing)
